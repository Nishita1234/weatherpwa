{"version":3,"sources":["logo.svg","component/fetchWeather.js","App.js","reportWebVitals.js","swDev.js","index.js"],"names":["fetchWeather","query","a","axios","get","params","q","units","APPID","data","App","useState","setQuery","weather","setWeather","search","e","key","console","log","className","type","placeholder","value","onChange","target","onKeyPress","main","name","sys","country","Math","round","temp","src","icon","alt","description","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","swDev","swUrl","process","navigator","serviceWorker","register","res","catch","err","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wOAAe,I,sBCOFA,EAAY,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,sEAEHC,IAClBC,IANK,kDAMG,CACLC,OAAQ,CACJC,EAAIL,EACJM,MAAM,SACNC,MATE,sCAEY,uBAEjBC,EAFiB,EAEjBA,KAFiB,kBAUfA,GAVe,2CAAH,sD,OCkDVC,MApDf,WACE,MAA0BC,mBAAS,IAAnC,mBAAOV,EAAP,KAAcW,EAAd,KAEA,EAA8BD,mBAAS,IAAvC,mBAAOE,EAAP,KAAgBC,EAAhB,KAEMC,EAAM,uCAAG,WAAOC,GAAP,eAAAd,EAAA,yDACC,UAAVc,EAAEC,IADO,gCAEQjB,EAAaC,GAFrB,OAELQ,EAFK,OAGXK,EAAWL,GACXS,QAAQC,IAAR,OAAoBV,GACpBG,EAAS,IALE,2CAAH,sDASZ,OACE,8BACE,sBAAKQ,UAAU,iBAAf,UACE,uBACEC,KAAK,OACLD,UAAU,SACVE,YAAY,WACZC,MAAOtB,EACPuB,SAAU,SAACR,GACTJ,EAASI,EAAES,OAAOF,QAEpBG,WAAYX,IAEbF,EAAQc,MACP,sBAAKP,UAAU,OAAf,UACE,qBAAIA,UAAU,YAAd,UACE,+BAAOP,EAAQe,OACf,8BAAMf,EAAQgB,IAAIC,aAEpB,sBAAKV,UAAU,YAAf,UACGW,KAAKC,MAAMnB,EAAQc,KAAKM,MACzB,2CAEF,qBAAKb,UAAU,OAAf,SACE,qBACEA,UAAU,YACVc,IAAG,4CAAuCrB,EAAQA,QAAQ,GAAGsB,KAA1D,WACHC,IAAKvB,EAAQA,QAAQ,GAAGwB,gBAG5B,4BAAIxB,EAAQA,QAAQ,GAAGwB,uBCrCpBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCECQ,EATD,WAEV,IAAIC,EAAK,UAAMC,cAAN,UACTC,UAAUC,cAAcC,SAASJ,GAAOP,MAAK,SAACY,GAC1CnC,QAAQC,IAAR,MAAmBkC,MACpBC,OAAM,SAACC,GACNrC,QAAQC,IAAR,MAAmBoC,OCA3BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BtB,IACAS,M","file":"static/js/main.ad7acf5c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import axios from 'axios';\r\nimport React from 'react';\r\n\r\n\r\nconst URL = 'https://api.openweathermap.org/data/2.5/weather';\r\nconst API_KEY = 'f33a484cf794d08d0148764789aaba32';\r\n\r\nexport const fetchWeather = async (query) => {\r\n\r\n    const {data} = await axios\r\n      .get(URL,{\r\n          params :{\r\n              q : query,\r\n              units:'metric',\r\n              APPID : API_KEY\r\n          }\r\n      });\r\n      return data;\r\n}\r\n\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport { fetchWeather } from \"./component/fetchWeather\";\n\nfunction App() {\n  const [query, setQuery] = useState(\"\");\n\n  const [weather, setWeather] = useState({});\n\n  const search = async (e) => {\n    if (e.key === \"Enter\") {\n      const data = await fetchWeather(query);\n      setWeather(data);\n      console.log(`data`, data);\n      setQuery(\"\");\n    }\n  };\n\n  return (\n    <div>\n      <div className=\"main-container\">\n        <input\n          type=\"text\"\n          className=\"search\"\n          placeholder=\"Search..\"\n          value={query}\n          onChange={(e) => {\n            setQuery(e.target.value);\n          }}\n          onKeyPress={search}\n        />\n        {weather.main && (\n          <div className=\"city\">\n            <h2 className=\"city-name\">\n              <span>{weather.name}</span>\n              <sup>{weather.sys.country}</sup>\n            </h2>\n            <div className=\"city-temp\">\n              {Math.round(weather.main.temp)}\n              <sup>&deg;C</sup>\n            </div>\n            <div className=\"info\">\n              <img\n                className=\"city-icon\"\n                src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}\n                alt={weather.weather[0].description}\n              />\n            </div>\n            <p>{weather.weather[0].description}</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const swDev = () => {\r\n\r\n    let swUrl = `${process.env.PUBLIC_URL}/sw.js`\r\n    navigator.serviceWorker.register(swUrl).then((res) => {\r\n        console.log(`res`, res);\r\n    }).catch((err) => {\r\n        console.log(`err`, err)\r\n    })\r\n} \r\nexport default swDev;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport swDev from \"./swDev\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\nswDev();"],"sourceRoot":""}